/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cdc_demo.data_faker.avro_generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Order table row */
@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2057002665470100774L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"org.cdc_demo.data_faker.avro_generated\",\"doc\":\"Order table row\",\"fields\":[{\"name\":\"customer_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer name\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer title\"},{\"name\":\"dob\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"},\"doc\":\"Customer date of birth\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<Customer> ENCODER =
      new BinaryMessageEncoder<Customer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Customer> DECODER =
      new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Customer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Customer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Customer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Customer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Customer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Customer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Customer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Customer name */
   private java.lang.String customer_name;
  /** Customer title */
   private java.lang.String title;
  /** Customer date of birth */
   private java.time.LocalDate dob;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Customer() {}

  /**
   * All-args constructor.
   * @param customer_name Customer name
   * @param title Customer title
   * @param dob Customer date of birth
   */
  public Customer(java.lang.String customer_name, java.lang.String title, java.time.LocalDate dob) {
    this.customer_name = customer_name;
    this.title = title;
    this.dob = dob;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customer_name;
    case 1: return title;
    case 2: return dob;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customer_name = value$ != null ? value$.toString() : null; break;
    case 1: title = value$ != null ? value$.toString() : null; break;
    case 2: dob = (java.time.LocalDate)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'customer_name' field.
   * @return Customer name
   */
  public java.lang.String getCustomerName() {
    return customer_name;
  }


  /**
   * Sets the value of the 'customer_name' field.
   * Customer name
   * @param value the value to set.
   */
  public void setCustomerName(java.lang.String value) {
    this.customer_name = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return Customer title
   */
  public java.lang.String getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * Customer title
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'dob' field.
   * @return Customer date of birth
   */
  public java.time.LocalDate getDob() {
    return dob;
  }


  /**
   * Sets the value of the 'dob' field.
   * Customer date of birth
   * @param value the value to set.
   */
  public void setDob(java.time.LocalDate value) {
    this.dob = value;
  }

  /**
   * Creates a new Customer RecordBuilder.
   * @return A new Customer RecordBuilder
   */
  public static org.cdc_demo.data_faker.avro_generated.Customer.Builder newBuilder() {
    return new org.cdc_demo.data_faker.avro_generated.Customer.Builder();
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Customer RecordBuilder
   */
  public static org.cdc_demo.data_faker.avro_generated.Customer.Builder newBuilder(org.cdc_demo.data_faker.avro_generated.Customer.Builder other) {
    if (other == null) {
      return new org.cdc_demo.data_faker.avro_generated.Customer.Builder();
    } else {
      return new org.cdc_demo.data_faker.avro_generated.Customer.Builder(other);
    }
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Customer instance.
   * @param other The existing instance to copy.
   * @return A new Customer RecordBuilder
   */
  public static org.cdc_demo.data_faker.avro_generated.Customer.Builder newBuilder(org.cdc_demo.data_faker.avro_generated.Customer other) {
    if (other == null) {
      return new org.cdc_demo.data_faker.avro_generated.Customer.Builder();
    } else {
      return new org.cdc_demo.data_faker.avro_generated.Customer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Customer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    /** Customer name */
    private java.lang.String customer_name;
    /** Customer title */
    private java.lang.String title;
    /** Customer date of birth */
    private java.time.LocalDate dob;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.cdc_demo.data_faker.avro_generated.Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customer_name)) {
        this.customer_name = data().deepCopy(fields()[0].schema(), other.customer_name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dob)) {
        this.dob = data().deepCopy(fields()[2].schema(), other.dob);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Customer instance
     * @param other The existing instance to copy.
     */
    private Builder(org.cdc_demo.data_faker.avro_generated.Customer other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.customer_name)) {
        this.customer_name = data().deepCopy(fields()[0].schema(), other.customer_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dob)) {
        this.dob = data().deepCopy(fields()[2].schema(), other.dob);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'customer_name' field.
      * Customer name
      * @return The value.
      */
    public java.lang.String getCustomerName() {
      return customer_name;
    }


    /**
      * Sets the value of the 'customer_name' field.
      * Customer name
      * @param value The value of 'customer_name'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Customer.Builder setCustomerName(java.lang.String value) {
      validate(fields()[0], value);
      this.customer_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_name' field has been set.
      * Customer name
      * @return True if the 'customer_name' field has been set, false otherwise.
      */
    public boolean hasCustomerName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customer_name' field.
      * Customer name
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Customer.Builder clearCustomerName() {
      customer_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * Customer title
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * Customer title
      * @param value The value of 'title'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Customer.Builder setTitle(java.lang.String value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * Customer title
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * Customer title
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Customer.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dob' field.
      * Customer date of birth
      * @return The value.
      */
    public java.time.LocalDate getDob() {
      return dob;
    }


    /**
      * Sets the value of the 'dob' field.
      * Customer date of birth
      * @param value The value of 'dob'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Customer.Builder setDob(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.dob = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dob' field has been set.
      * Customer date of birth
      * @return True if the 'dob' field has been set, false otherwise.
      */
    public boolean hasDob() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dob' field.
      * Customer date of birth
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Customer.Builder clearDob() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Customer build() {
      try {
        Customer record = new Customer();
        record.customer_name = fieldSetFlags()[0] ? this.customer_name : (java.lang.String) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.String) defaultValue(fields()[1]);
        record.dob = fieldSetFlags()[2] ? this.dob : (java.time.LocalDate) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Customer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Customer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Customer>
    READER$ = (org.apache.avro.io.DatumReader<Customer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










