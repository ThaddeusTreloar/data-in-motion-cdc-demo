/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cdc_demo.data_faker.avro_generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Order table row */
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5365686476691607966L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"org.cdc_demo.data_faker.avro_generated\",\"doc\":\"Order table row\",\"fields\":[{\"name\":\"customer_id\",\"type\":\"long\",\"doc\":\"FK to Customers table\"},{\"name\":\"shipping_address\",\"type\":\"long\",\"doc\":\"FK to Address table\"},{\"name\":\"order_date\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"},\"doc\":\"Shipment create time\"},{\"name\":\"order_status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED\"},{\"name\":\"line_item_count\",\"type\":\"int\",\"doc\":\"Number of line items in the order\"},{\"name\":\"updated_on\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Shipment update time\"},{\"name\":\"statement_action\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"SQL action for this record. Can be INSERT | UPDATE | DELETE\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** FK to Customers table */
   private long customer_id;
  /** FK to Address table */
   private long shipping_address;
  /** Shipment create time */
   private java.time.LocalDate order_date;
  /** Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED */
   private java.lang.String order_status;
  /** Number of line items in the order */
   private int line_item_count;
  /** Shipment update time */
   private java.time.Instant updated_on;
  /** SQL action for this record. Can be INSERT | UPDATE | DELETE */
   private java.lang.String statement_action;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param customer_id FK to Customers table
   * @param shipping_address FK to Address table
   * @param order_date Shipment create time
   * @param order_status Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED
   * @param line_item_count Number of line items in the order
   * @param updated_on Shipment update time
   * @param statement_action SQL action for this record. Can be INSERT | UPDATE | DELETE
   */
  public Order(java.lang.Long customer_id, java.lang.Long shipping_address, java.time.LocalDate order_date, java.lang.String order_status, java.lang.Integer line_item_count, java.time.Instant updated_on, java.lang.String statement_action) {
    this.customer_id = customer_id;
    this.shipping_address = shipping_address;
    this.order_date = order_date;
    this.order_status = order_status;
    this.line_item_count = line_item_count;
    this.updated_on = updated_on.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.statement_action = statement_action;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customer_id;
    case 1: return shipping_address;
    case 2: return order_date;
    case 3: return order_status;
    case 4: return line_item_count;
    case 5: return updated_on;
    case 6: return statement_action;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customer_id = (java.lang.Long)value$; break;
    case 1: shipping_address = (java.lang.Long)value$; break;
    case 2: order_date = (java.time.LocalDate)value$; break;
    case 3: order_status = value$ != null ? value$.toString() : null; break;
    case 4: line_item_count = (java.lang.Integer)value$; break;
    case 5: updated_on = (java.time.Instant)value$; break;
    case 6: statement_action = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'customer_id' field.
   * @return FK to Customers table
   */
  public long getCustomerId() {
    return customer_id;
  }


  /**
   * Sets the value of the 'customer_id' field.
   * FK to Customers table
   * @param value the value to set.
   */
  public void setCustomerId(long value) {
    this.customer_id = value;
  }

  /**
   * Gets the value of the 'shipping_address' field.
   * @return FK to Address table
   */
  public long getShippingAddress() {
    return shipping_address;
  }


  /**
   * Sets the value of the 'shipping_address' field.
   * FK to Address table
   * @param value the value to set.
   */
  public void setShippingAddress(long value) {
    this.shipping_address = value;
  }

  /**
   * Gets the value of the 'order_date' field.
   * @return Shipment create time
   */
  public java.time.LocalDate getOrderDate() {
    return order_date;
  }


  /**
   * Sets the value of the 'order_date' field.
   * Shipment create time
   * @param value the value to set.
   */
  public void setOrderDate(java.time.LocalDate value) {
    this.order_date = value;
  }

  /**
   * Gets the value of the 'order_status' field.
   * @return Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED
   */
  public java.lang.String getOrderStatus() {
    return order_status;
  }


  /**
   * Sets the value of the 'order_status' field.
   * Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED
   * @param value the value to set.
   */
  public void setOrderStatus(java.lang.String value) {
    this.order_status = value;
  }

  /**
   * Gets the value of the 'line_item_count' field.
   * @return Number of line items in the order
   */
  public int getLineItemCount() {
    return line_item_count;
  }


  /**
   * Sets the value of the 'line_item_count' field.
   * Number of line items in the order
   * @param value the value to set.
   */
  public void setLineItemCount(int value) {
    this.line_item_count = value;
  }

  /**
   * Gets the value of the 'updated_on' field.
   * @return Shipment update time
   */
  public java.time.Instant getUpdatedOn() {
    return updated_on;
  }


  /**
   * Sets the value of the 'updated_on' field.
   * Shipment update time
   * @param value the value to set.
   */
  public void setUpdatedOn(java.time.Instant value) {
    this.updated_on = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'statement_action' field.
   * @return SQL action for this record. Can be INSERT | UPDATE | DELETE
   */
  public java.lang.String getStatementAction() {
    return statement_action;
  }


  /**
   * Sets the value of the 'statement_action' field.
   * SQL action for this record. Can be INSERT | UPDATE | DELETE
   * @param value the value to set.
   */
  public void setStatementAction(java.lang.String value) {
    this.statement_action = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static org.cdc_demo.data_faker.avro_generated.Order.Builder newBuilder() {
    return new org.cdc_demo.data_faker.avro_generated.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static org.cdc_demo.data_faker.avro_generated.Order.Builder newBuilder(org.cdc_demo.data_faker.avro_generated.Order.Builder other) {
    if (other == null) {
      return new org.cdc_demo.data_faker.avro_generated.Order.Builder();
    } else {
      return new org.cdc_demo.data_faker.avro_generated.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static org.cdc_demo.data_faker.avro_generated.Order.Builder newBuilder(org.cdc_demo.data_faker.avro_generated.Order other) {
    if (other == null) {
      return new org.cdc_demo.data_faker.avro_generated.Order.Builder();
    } else {
      return new org.cdc_demo.data_faker.avro_generated.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    /** FK to Customers table */
    private long customer_id;
    /** FK to Address table */
    private long shipping_address;
    /** Shipment create time */
    private java.time.LocalDate order_date;
    /** Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED */
    private java.lang.String order_status;
    /** Number of line items in the order */
    private int line_item_count;
    /** Shipment update time */
    private java.time.Instant updated_on;
    /** SQL action for this record. Can be INSERT | UPDATE | DELETE */
    private java.lang.String statement_action;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.cdc_demo.data_faker.avro_generated.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[0].schema(), other.customer_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.shipping_address)) {
        this.shipping_address = data().deepCopy(fields()[1].schema(), other.shipping_address);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.order_date)) {
        this.order_date = data().deepCopy(fields()[2].schema(), other.order_date);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.order_status)) {
        this.order_status = data().deepCopy(fields()[3].schema(), other.order_status);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.line_item_count)) {
        this.line_item_count = data().deepCopy(fields()[4].schema(), other.line_item_count);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.updated_on)) {
        this.updated_on = data().deepCopy(fields()[5].schema(), other.updated_on);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.statement_action)) {
        this.statement_action = data().deepCopy(fields()[6].schema(), other.statement_action);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(org.cdc_demo.data_faker.avro_generated.Order other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[0].schema(), other.customer_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.shipping_address)) {
        this.shipping_address = data().deepCopy(fields()[1].schema(), other.shipping_address);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.order_date)) {
        this.order_date = data().deepCopy(fields()[2].schema(), other.order_date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.order_status)) {
        this.order_status = data().deepCopy(fields()[3].schema(), other.order_status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.line_item_count)) {
        this.line_item_count = data().deepCopy(fields()[4].schema(), other.line_item_count);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.updated_on)) {
        this.updated_on = data().deepCopy(fields()[5].schema(), other.updated_on);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.statement_action)) {
        this.statement_action = data().deepCopy(fields()[6].schema(), other.statement_action);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'customer_id' field.
      * FK to Customers table
      * @return The value.
      */
    public long getCustomerId() {
      return customer_id;
    }


    /**
      * Sets the value of the 'customer_id' field.
      * FK to Customers table
      * @param value The value of 'customer_id'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder setCustomerId(long value) {
      validate(fields()[0], value);
      this.customer_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_id' field has been set.
      * FK to Customers table
      * @return True if the 'customer_id' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customer_id' field.
      * FK to Customers table
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder clearCustomerId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'shipping_address' field.
      * FK to Address table
      * @return The value.
      */
    public long getShippingAddress() {
      return shipping_address;
    }


    /**
      * Sets the value of the 'shipping_address' field.
      * FK to Address table
      * @param value The value of 'shipping_address'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder setShippingAddress(long value) {
      validate(fields()[1], value);
      this.shipping_address = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'shipping_address' field has been set.
      * FK to Address table
      * @return True if the 'shipping_address' field has been set, false otherwise.
      */
    public boolean hasShippingAddress() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'shipping_address' field.
      * FK to Address table
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder clearShippingAddress() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_date' field.
      * Shipment create time
      * @return The value.
      */
    public java.time.LocalDate getOrderDate() {
      return order_date;
    }


    /**
      * Sets the value of the 'order_date' field.
      * Shipment create time
      * @param value The value of 'order_date'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder setOrderDate(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.order_date = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'order_date' field has been set.
      * Shipment create time
      * @return True if the 'order_date' field has been set, false otherwise.
      */
    public boolean hasOrderDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'order_date' field.
      * Shipment create time
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder clearOrderDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_status' field.
      * Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED
      * @return The value.
      */
    public java.lang.String getOrderStatus() {
      return order_status;
    }


    /**
      * Sets the value of the 'order_status' field.
      * Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED
      * @param value The value of 'order_status'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder setOrderStatus(java.lang.String value) {
      validate(fields()[3], value);
      this.order_status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'order_status' field has been set.
      * Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED
      * @return True if the 'order_status' field has been set, false otherwise.
      */
    public boolean hasOrderStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'order_status' field.
      * Order state. Can be PENDING | SHIPPED | COMPLETED | CANCELLED
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder clearOrderStatus() {
      order_status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'line_item_count' field.
      * Number of line items in the order
      * @return The value.
      */
    public int getLineItemCount() {
      return line_item_count;
    }


    /**
      * Sets the value of the 'line_item_count' field.
      * Number of line items in the order
      * @param value The value of 'line_item_count'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder setLineItemCount(int value) {
      validate(fields()[4], value);
      this.line_item_count = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'line_item_count' field has been set.
      * Number of line items in the order
      * @return True if the 'line_item_count' field has been set, false otherwise.
      */
    public boolean hasLineItemCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'line_item_count' field.
      * Number of line items in the order
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder clearLineItemCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'updated_on' field.
      * Shipment update time
      * @return The value.
      */
    public java.time.Instant getUpdatedOn() {
      return updated_on;
    }


    /**
      * Sets the value of the 'updated_on' field.
      * Shipment update time
      * @param value The value of 'updated_on'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder setUpdatedOn(java.time.Instant value) {
      validate(fields()[5], value);
      this.updated_on = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'updated_on' field has been set.
      * Shipment update time
      * @return True if the 'updated_on' field has been set, false otherwise.
      */
    public boolean hasUpdatedOn() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'updated_on' field.
      * Shipment update time
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder clearUpdatedOn() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'statement_action' field.
      * SQL action for this record. Can be INSERT | UPDATE | DELETE
      * @return The value.
      */
    public java.lang.String getStatementAction() {
      return statement_action;
    }


    /**
      * Sets the value of the 'statement_action' field.
      * SQL action for this record. Can be INSERT | UPDATE | DELETE
      * @param value The value of 'statement_action'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder setStatementAction(java.lang.String value) {
      validate(fields()[6], value);
      this.statement_action = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'statement_action' field has been set.
      * SQL action for this record. Can be INSERT | UPDATE | DELETE
      * @return True if the 'statement_action' field has been set, false otherwise.
      */
    public boolean hasStatementAction() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'statement_action' field.
      * SQL action for this record. Can be INSERT | UPDATE | DELETE
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Order.Builder clearStatementAction() {
      statement_action = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.customer_id = fieldSetFlags()[0] ? this.customer_id : (java.lang.Long) defaultValue(fields()[0]);
        record.shipping_address = fieldSetFlags()[1] ? this.shipping_address : (java.lang.Long) defaultValue(fields()[1]);
        record.order_date = fieldSetFlags()[2] ? this.order_date : (java.time.LocalDate) defaultValue(fields()[2]);
        record.order_status = fieldSetFlags()[3] ? this.order_status : (java.lang.String) defaultValue(fields()[3]);
        record.line_item_count = fieldSetFlags()[4] ? this.line_item_count : (java.lang.Integer) defaultValue(fields()[4]);
        record.updated_on = fieldSetFlags()[5] ? this.updated_on : (java.time.Instant) defaultValue(fields()[5]);
        record.statement_action = fieldSetFlags()[6] ? this.statement_action : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










