/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cdc_demo.data_faker.avro_generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Customer contact details */
@org.apache.avro.specific.AvroGenerated
public class Contact extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4555042118782497452L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Contact\",\"namespace\":\"org.cdc_demo.data_faker.avro_generated\",\"doc\":\"Customer contact details\",\"fields\":[{\"name\":\"customer_id\",\"type\":\"long\",\"doc\":\"FK to Customers table\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer email address\"},{\"name\":\"mobile\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer phone number\"},{\"name\":\"twitter\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Twitter handle\"},{\"name\":\"instagram\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Instagram handle\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Contact> ENCODER =
      new BinaryMessageEncoder<Contact>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Contact> DECODER =
      new BinaryMessageDecoder<Contact>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Contact> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Contact> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Contact> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Contact>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Contact to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Contact from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Contact instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Contact fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** FK to Customers table */
   private long customer_id;
  /** Customer email address */
   private java.lang.String email;
  /** Customer phone number */
   private java.lang.String mobile;
  /** Twitter handle */
   private java.lang.String twitter;
  /** Instagram handle */
   private java.lang.String instagram;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Contact() {}

  /**
   * All-args constructor.
   * @param customer_id FK to Customers table
   * @param email Customer email address
   * @param mobile Customer phone number
   * @param twitter Twitter handle
   * @param instagram Instagram handle
   */
  public Contact(java.lang.Long customer_id, java.lang.String email, java.lang.String mobile, java.lang.String twitter, java.lang.String instagram) {
    this.customer_id = customer_id;
    this.email = email;
    this.mobile = mobile;
    this.twitter = twitter;
    this.instagram = instagram;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customer_id;
    case 1: return email;
    case 2: return mobile;
    case 3: return twitter;
    case 4: return instagram;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customer_id = (java.lang.Long)value$; break;
    case 1: email = value$ != null ? value$.toString() : null; break;
    case 2: mobile = value$ != null ? value$.toString() : null; break;
    case 3: twitter = value$ != null ? value$.toString() : null; break;
    case 4: instagram = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'customer_id' field.
   * @return FK to Customers table
   */
  public long getCustomerId() {
    return customer_id;
  }


  /**
   * Sets the value of the 'customer_id' field.
   * FK to Customers table
   * @param value the value to set.
   */
  public void setCustomerId(long value) {
    this.customer_id = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return Customer email address
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * Customer email address
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'mobile' field.
   * @return Customer phone number
   */
  public java.lang.String getMobile() {
    return mobile;
  }


  /**
   * Sets the value of the 'mobile' field.
   * Customer phone number
   * @param value the value to set.
   */
  public void setMobile(java.lang.String value) {
    this.mobile = value;
  }

  /**
   * Gets the value of the 'twitter' field.
   * @return Twitter handle
   */
  public java.lang.String getTwitter() {
    return twitter;
  }


  /**
   * Sets the value of the 'twitter' field.
   * Twitter handle
   * @param value the value to set.
   */
  public void setTwitter(java.lang.String value) {
    this.twitter = value;
  }

  /**
   * Gets the value of the 'instagram' field.
   * @return Instagram handle
   */
  public java.lang.String getInstagram() {
    return instagram;
  }


  /**
   * Sets the value of the 'instagram' field.
   * Instagram handle
   * @param value the value to set.
   */
  public void setInstagram(java.lang.String value) {
    this.instagram = value;
  }

  /**
   * Creates a new Contact RecordBuilder.
   * @return A new Contact RecordBuilder
   */
  public static org.cdc_demo.data_faker.avro_generated.Contact.Builder newBuilder() {
    return new org.cdc_demo.data_faker.avro_generated.Contact.Builder();
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Contact RecordBuilder
   */
  public static org.cdc_demo.data_faker.avro_generated.Contact.Builder newBuilder(org.cdc_demo.data_faker.avro_generated.Contact.Builder other) {
    if (other == null) {
      return new org.cdc_demo.data_faker.avro_generated.Contact.Builder();
    } else {
      return new org.cdc_demo.data_faker.avro_generated.Contact.Builder(other);
    }
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Contact instance.
   * @param other The existing instance to copy.
   * @return A new Contact RecordBuilder
   */
  public static org.cdc_demo.data_faker.avro_generated.Contact.Builder newBuilder(org.cdc_demo.data_faker.avro_generated.Contact other) {
    if (other == null) {
      return new org.cdc_demo.data_faker.avro_generated.Contact.Builder();
    } else {
      return new org.cdc_demo.data_faker.avro_generated.Contact.Builder(other);
    }
  }

  /**
   * RecordBuilder for Contact instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Contact>
    implements org.apache.avro.data.RecordBuilder<Contact> {

    /** FK to Customers table */
    private long customer_id;
    /** Customer email address */
    private java.lang.String email;
    /** Customer phone number */
    private java.lang.String mobile;
    /** Twitter handle */
    private java.lang.String twitter;
    /** Instagram handle */
    private java.lang.String instagram;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.cdc_demo.data_faker.avro_generated.Contact.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[0].schema(), other.customer_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mobile)) {
        this.mobile = data().deepCopy(fields()[2].schema(), other.mobile);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.twitter)) {
        this.twitter = data().deepCopy(fields()[3].schema(), other.twitter);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.instagram)) {
        this.instagram = data().deepCopy(fields()[4].schema(), other.instagram);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Contact instance
     * @param other The existing instance to copy.
     */
    private Builder(org.cdc_demo.data_faker.avro_generated.Contact other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[0].schema(), other.customer_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mobile)) {
        this.mobile = data().deepCopy(fields()[2].schema(), other.mobile);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.twitter)) {
        this.twitter = data().deepCopy(fields()[3].schema(), other.twitter);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.instagram)) {
        this.instagram = data().deepCopy(fields()[4].schema(), other.instagram);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'customer_id' field.
      * FK to Customers table
      * @return The value.
      */
    public long getCustomerId() {
      return customer_id;
    }


    /**
      * Sets the value of the 'customer_id' field.
      * FK to Customers table
      * @param value The value of 'customer_id'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder setCustomerId(long value) {
      validate(fields()[0], value);
      this.customer_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_id' field has been set.
      * FK to Customers table
      * @return True if the 'customer_id' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customer_id' field.
      * FK to Customers table
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder clearCustomerId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * Customer email address
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * Customer email address
      * @param value The value of 'email'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder setEmail(java.lang.String value) {
      validate(fields()[1], value);
      this.email = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * Customer email address
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'email' field.
      * Customer email address
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder clearEmail() {
      email = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobile' field.
      * Customer phone number
      * @return The value.
      */
    public java.lang.String getMobile() {
      return mobile;
    }


    /**
      * Sets the value of the 'mobile' field.
      * Customer phone number
      * @param value The value of 'mobile'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder setMobile(java.lang.String value) {
      validate(fields()[2], value);
      this.mobile = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mobile' field has been set.
      * Customer phone number
      * @return True if the 'mobile' field has been set, false otherwise.
      */
    public boolean hasMobile() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mobile' field.
      * Customer phone number
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder clearMobile() {
      mobile = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'twitter' field.
      * Twitter handle
      * @return The value.
      */
    public java.lang.String getTwitter() {
      return twitter;
    }


    /**
      * Sets the value of the 'twitter' field.
      * Twitter handle
      * @param value The value of 'twitter'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder setTwitter(java.lang.String value) {
      validate(fields()[3], value);
      this.twitter = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'twitter' field has been set.
      * Twitter handle
      * @return True if the 'twitter' field has been set, false otherwise.
      */
    public boolean hasTwitter() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'twitter' field.
      * Twitter handle
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder clearTwitter() {
      twitter = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'instagram' field.
      * Instagram handle
      * @return The value.
      */
    public java.lang.String getInstagram() {
      return instagram;
    }


    /**
      * Sets the value of the 'instagram' field.
      * Instagram handle
      * @param value The value of 'instagram'.
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder setInstagram(java.lang.String value) {
      validate(fields()[4], value);
      this.instagram = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'instagram' field has been set.
      * Instagram handle
      * @return True if the 'instagram' field has been set, false otherwise.
      */
    public boolean hasInstagram() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'instagram' field.
      * Instagram handle
      * @return This builder.
      */
    public org.cdc_demo.data_faker.avro_generated.Contact.Builder clearInstagram() {
      instagram = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Contact build() {
      try {
        Contact record = new Contact();
        record.customer_id = fieldSetFlags()[0] ? this.customer_id : (java.lang.Long) defaultValue(fields()[0]);
        record.email = fieldSetFlags()[1] ? this.email : (java.lang.String) defaultValue(fields()[1]);
        record.mobile = fieldSetFlags()[2] ? this.mobile : (java.lang.String) defaultValue(fields()[2]);
        record.twitter = fieldSetFlags()[3] ? this.twitter : (java.lang.String) defaultValue(fields()[3]);
        record.instagram = fieldSetFlags()[4] ? this.instagram : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Contact>
    WRITER$ = (org.apache.avro.io.DatumWriter<Contact>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Contact>
    READER$ = (org.apache.avro.io.DatumReader<Contact>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.customer_id);

    out.writeString(this.email);

    out.writeString(this.mobile);

    out.writeString(this.twitter);

    out.writeString(this.instagram);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.customer_id = in.readLong();

      this.email = in.readString();

      this.mobile = in.readString();

      this.twitter = in.readString();

      this.instagram = in.readString();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.customer_id = in.readLong();
          break;

        case 1:
          this.email = in.readString();
          break;

        case 2:
          this.mobile = in.readString();
          break;

        case 3:
          this.twitter = in.readString();
          break;

        case 4:
          this.instagram = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










